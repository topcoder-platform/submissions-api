swagger: '2.0'
info:
  description: |
    REST API for Topcoder Submissions.

    ### Pagination
      Requests that return multiple items will be paginated to 20 items by default. You can specify
      further pages with the `page` parameter. You can also set a custom page
      size up to 100 with the `perPage` parameter.

      Pagination response data is included in http headers. By Default, the response header contains links with `next`, `last`, `first`, `prev` resource links.
  version: '5.0.0'
  title: 'Topcoder Submissions REST API'
  termsOfService: 'http://topcoder.com/terms/'

  contact:
    url: 'http://www.topcoder.com/support'
    email: support@topcoder.com

schemes:
  - https
  - http
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: 'Submissions'
    description: Everything about submissions.
  - name: 'Review summations'
    description: Everything about review summations.
  - name: 'Reviews'
    description: Everything about reviews.
  - name: 'Review types'
    description: Everything about review types.

securityDefinitions:
  Bearer:
    type: apiKey
    in: header
    name: Authorization

security:
  - Bearer: []

paths:
  /submissions:
    get:
      summary: Get all submissions.
      description: |
        Get all submissions. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Resulted collection of submissions can be filtered using filter parameters `type`, `url`, `memberId`, `challengeId` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.
      tags:
        - Submissions
      operationId: getSubmissions
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterSubmissionType'
        - $ref: '#/parameters/filterSubmissionUrl'
        - $ref: '#/parameters/filterSubmissionMemberId'
        - $ref: '#/parameters/filterSubmissionChallengeId'
        - $ref: '#/parameters/filterSubmissionLegacySubmissionId'
        - $ref: '#/parameters/filterSubmissionLegacyUploadId'
        - $ref: '#/parameters/filterSubmissionSubmissionPhaseId'
      responses:
        200:
          description: OK - the request was successful, the submissions resource are returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Submission'
            example:
              - id: 'a12a4180-65aa-42ec-a945-5fd21dec0503'
                type: ContestSubmission
                url: 'https://software.topcoder.com/review/actions/DownloadContestSubmission?uid=123456'
                memberId: 'a12a4180-65aa-42ec-a945-5fd21dec0501'
                challengeId: 'a12a4180-65aa-42ec-a945-5fd21dec0502'
                created: '2018-05-20T07:00:30.123Z'
                updated: '2018-06-01T07:36:28.178Z'
                createdBy: 'topcoder user'
                updatedBy: 'topcoder user'
              - id: 'a12a4180-65aa-42ec-a945-5fd21dec0513'
                type: ContestSubmission
                url: 'https://software.topcoder.com/review/actions/DownloadContestSubmission?uid=123457'
                memberId: 'a12a4180-65aa-42ec-a945-5fd21dec0552'
                challengeId: 'a12a4180-65aa-42ec-a945-5fd21dec0502'
                created: '2018-05-20T08:00:30.000Z'
                updated: '2018-06-01T09:23:00.178Z'
                createdBy: 'topcoder user'
                updatedBy: 'topcoder user'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Requested submissions can be filtered using filter parameters `type`, `url`, `memberId`, `challengeId` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.
      tags:
        - Submissions
      operationId: headSubmissions
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterSubmissionType'
        - $ref: '#/parameters/filterSubmissionUrl'
        - $ref: '#/parameters/filterSubmissionMemberId'
        - $ref: '#/parameters/filterSubmissionChallengeId'
        - $ref: '#/parameters/filterSubmissionLegacySubmissionId'
        - $ref: '#/parameters/filterSubmissionLegacyUploadId'
        - $ref: '#/parameters/filterSubmissionSubmissionPhaseId'
      responses:
        200:
          description: OK - The request was successful.
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    post:
      summary: Create a submission.
      description: |
        Create a new submission.

        **Authorization:** Submission creation is accessible by roles `topcoder user`, `admin` and `copilot`.
      tags:
        - Submissions
      operationId: createSubmission
      consumes:
         - multipart/form-data
      parameters:
        - in: formData
          name: submission
          type: file
          required: false
          description: The submission file to upload.
        - in: formData
          name: url
          type: string
          required: false
          description: Submission file url.
        - in: formData
          name: fileType
          type: string
          description: File type of uploaded file or URL provided, Defaults to zip if not provided
        - in: formData
          name: type
          type: string
          required: true
          description: Submission type.
          enum:
            - ContestSubmission
        - in: formData
          name: memberId
          oneOf:
            - type: string
            - type: integer
          required: true
          description: Member Id.
        - in: formData
          name: challengeId
          oneOf:
            - type: string
            - type: integer
          required: true
          description: Challenge Id.
        - in: formData
          name: legacySubmissionId
          oneOf:
            - type: string
            - type: integer
          description: Legacy Submission Id
        - in: formData
          name: legacyUploadId
          oneOf:
            - type: string
            - type: integer
          description: Legacy Submission Id
        - in: formData
          name: submissionPhaseId
          oneOf:
            - type: string
            - type: integer
          description: Submission Phase Id
      responses:
        201:
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/Submission'
          headers:
            Location:
              type: string
              description: The Location response header indicates the URL to redirect a page to or created resource. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        409:
          $ref: '#/definitions/Conflict'
        500:
          $ref: '#/definitions/ServerError'

  /submissions/{submissionId}:
    get:
      summary: Get the submission.
      description: |
        Get the submission by id.

        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.
      tags:
        - Submissions
      operationId: getSubmission
      parameters:
        - $ref: '#/parameters/submissionIdParam'
      responses:
        200:
          description: OK - the request was successful and the submission is returned.
          schema:
            $ref: '#/definitions/Submission'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. It does not contain response body.

        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.
      tags:
        - Submissions
      operationId: headSubmission
      parameters:
        - $ref: '#/parameters/submissionIdParam'
      responses:
        200:
          description: OK - The request was successful.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    put:
      summary: Update the submission.
      description: |
        Update the submission by id.

        **Authorization:** Submission update is accessible only by `admin` role.
      tags:
        - Submissions
      operationId: updateSubmission
      parameters:
        - $ref: '#/parameters/submissionIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatableSubmission'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/Submission'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    patch:
      summary: Partially update the submission.
      description: |
        Allows to partially modify the submission with the provided request body properties.

        **Authorization:** Partially modify of submission is accessible only by `admin` role.
      tags:
        - Submissions
      operationId: partiallyUpdateSubmission
      parameters:
        - $ref: '#/parameters/submissionIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PartiallySubmission'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/Submission'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    delete:
      summary: Delete the submission.
      description: |
        Delete the submission.

        **Authorization:** Submission deletion is accessible only by `admin` role.
      tags:
        - Submissions
      operationId: deleteSubmission
      parameters:
        - $ref: '#/parameters/submissionIdParam'
      responses:
        204:
          $ref: '#/definitions/NoContent'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

  /reviewSummations:
    get:
      summary: Get all review summations.
      description: |
        Get all review summations. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Resulted collection of review summations can be filtered using filter parameters `submissionId`, `aggregateScore`, `scoreCardId`, `isPassing` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review summations'
      operationId: getReviewSummations
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewSummationSubmissionId'
        - $ref: '#/parameters/filterReviewSummationAaggregateScore'
        - $ref: '#/parameters/filterReviewSummationScoreCardId'
        - $ref: '#/parameters/filterReviewSummationIsPassing'
      responses:
        200:
          description: OK - the request was successful, the resource are returned.

          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewSummation'
            example:
              - id: 'a12a4180-65aa-42ec-a945-5fd21dec1503'
                submissionId: 'a12a4180-65aa-42ec-a945-5fd21dec1567'
                aggregateScore: 17.8
                scoreCardId: 'a12a4180-65aa-42ec-a945-5fd21dec0587'
                isPassing: false
                created: '2018-05-20T07:00:30.123Z'
                updated: '2018-06-01T07:36:28.178Z'
                createdBy: copilot
                updatedBy: copilot
              - id: 'a12a4180-65aa-42ec-a945-5fd21dec1504'
                submissionId: 'a12a4180-65aa-42ec-a945-5fd21dec1568'
                aggregateScore: 97.8
                scoreCardId: 'a12a4180-65aa-42ec-a945-5fd21dec0587'
                isPassing: true
                created: '2018-05-20T07:00:30.123Z'
                updated: '2018-06-01T07:36:28.178Z'
                createdBy: copilot
                updatedBy: copilot
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Requested review summations can be filtered using filter parameters `submissionId`, `aggregateScore`, `scoreCardId`, `isPassing` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review summations'
      operationId: headReviewSummations
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewSummationSubmissionId'
        - $ref: '#/parameters/filterReviewSummationAaggregateScore'
        - $ref: '#/parameters/filterReviewSummationScoreCardId'
        - $ref: '#/parameters/filterReviewSummationIsPassing'
      responses:
        200:
          description: OK - The request was successful.
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    post:
      summary: Create a review summation.
      description: |
        Create a new review summation.

        **Authorization:** Review summation creation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review summations'
      operationId: createReviewSummation
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ReviewSummation'
      responses:
        201:
          description: Created - The request was successful and the resource is returned.

          schema:
            $ref: '#/definitions/ReviewSummation'
          headers:
            Location:
              type: string
              description: The Location response header indicates the URL to redirect a page to or created resource. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        409:
          $ref: '#/definitions/Conflict'
        500:
          $ref: '#/definitions/ServerError'

  /reviewSummations/{reviewSummationId}:

    get:
      summary: Get the review summation.
      description: |
        Get the review summation by id.

        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review summations'
      operationId: getReviewSummation
      parameters:
        - $ref: '#/parameters/reviewSummationIdParam'
      responses:
        200:
          description: OK - the request was successful and the review summation is returned.
          schema:
            $ref: '#/definitions/ReviewSummation'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. It does not contain response body.

        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review summations'
      operationId: headReviewSummation
      parameters:
        - $ref: '#/parameters/reviewSummationIdParam'
      responses:
        200:
          description: OK - The request was successful.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    put:
      summary: Update the review summation.
      description: |
        Update the review summation by id.

        **Authorization:** Review summation update is accessible only by `admin` role.
      tags:
        - 'Review summations'
      operationId: updateReviewSummation
      parameters:
        - $ref: '#/parameters/reviewSummationIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatableReviewSummation'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/ReviewSummation'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    patch:
      summary: Partially update the review summation.
      description: |
        Allows to partially modify the review summation with the provided request body properties.

        **Authorization:** Partially modify of review summation is accessible only by `admin` role.
      tags:
        - 'Review summations'
      operationId: partiallyUpdateReviewSummation
      parameters:
        - $ref: '#/parameters/reviewSummationIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PartiallyReviewSummation'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.
          schema:
            $ref: '#/definitions/ReviewSummation'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    delete:
      summary: Delete the review summation.
      description: |
        Delete the review summation.

        **Authorization:** Review summation deletion is accessible only by `admin` role.
      tags:
        - 'Review summations'
      operationId: deleteReviewSummation
      parameters:
        - $ref: '#/parameters/reviewSummationIdParam'
      responses:
        204:
          $ref: '#/definitions/NoContent'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

  /reviews:
    get:
      summary: Get all reviews.
      description: |
        Get all reviews. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Resulted collection of reviews can be filtered using filter parameters `score`, `typeId`, `reviewerId`, `scoreCardId` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review is accessible by roles `admin` and `copilot`.
      tags:
        - 'Reviews'
      operationId: getReviews
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewScore'
        - $ref: '#/parameters/filterReviewTypeId'
        - $ref: '#/parameters/filterReviewReviewerId'
        - $ref: '#/parameters/filterReviewScoreCardId'
        - $ref: '#/parameters/filterReviewSubmissionId'
      responses:
        200:
          description: OK - the request was successful, the resource are returned.

          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
            example:
              - id: 'a12a4180-65aa-42ec-a945-5fd21dec0503'
                score: 95.5
                typeId: 'c56a4180-65aa-42ec-a945-5fd21dec0503'
                reviewerId: 'c23a4180-65aa-42ec-a945-5fd21dec0503'
                scoreCardId: 'b25a4180-65aa-42ec-a945-5fd21dec0503'
                submissionId: 'd67a4180-65aa-42ec-a945-5fd21dec0503'
                created: '2018-05-20T07:00:30.123Z'
                updated: '2018-06-01T07:36:28.178Z'
                createdBy: 'admin'
                updatedBy: 'admin'
              - id: 'a23c4180-65aa-42ec-a945-5fd21dec0503'
                score: 73.2
                typeId: 'c56a4180-65aa-42ec-a945-5fd21dec0503'
                reviewerId: 'c23a4180-65aa-42ec-a945-5fd21dec0503'
                scoreCardId: 'b25a4180-65aa-42ec-a945-5fd21dec0503'
                submissionId: 'd23a4180-65aa-42ec-a945-5fd21dec0503'
                created: '2018-05-20T07:00:30.123Z'
                updated: '2018-06-01T07:36:28.178Z'
                createdBy: 'admin'
                updatedBy: 'admin'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Requested reviews can be filtered using filter parameters `score`, `typeId`, `reviewerId`, `scoreCardId` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review is accessible by roles `admin` and `copilot`.
      tags:
        - 'Reviews'
      operationId: headReviews
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewScore'
        - $ref: '#/parameters/filterReviewTypeId'
        - $ref: '#/parameters/filterReviewReviewerId'
        - $ref: '#/parameters/filterReviewScoreCardId'
      responses:
        200:
          description: OK - The request was successful.
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    post:
      summary: Create a review.
      description: |
        Create a new review.

        **Authorization:** Review creation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Reviews'
      operationId: createReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Review'
      responses:
        201:
          description: Created - The request was successful and the resource is returned.

          schema:
            $ref: '#/definitions/Review'
          headers:
            Location:
              type: string
              description: The Location response header indicates the URL to redirect a page to or created resource. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        409:
          $ref: '#/definitions/Conflict'
        500:
          $ref: '#/definitions/ServerError'

  /reviews/{reviewId}:
    get:
      summary: Get the review.
      description: |
        Get the review by id.

        **Authorization:** Review is accessible by roles `admin` and `copilot`.
      tags:
        - 'Reviews'
      operationId: getReview
      parameters:
        - $ref: '#/parameters/reviewIdParam'
      responses:
        200:
          description: OK - the request was successful and the review is returned.
          schema:
            $ref: '#/definitions/Review'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. It does not contain response body.

        **Authorization:** Review is accessible by roles `admin` and `copilot`.
      tags:
        - 'Reviews'
      operationId: headReview
      parameters:
        - $ref: '#/parameters/reviewIdParam'
      responses:
        200:
          description: OK - The request was successful.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    put:
      summary: Update the review.
      description: |
        Update the review by id.

        **Authorization:** Review update is accessible only by `admin` role.
      tags:
        - 'Reviews'
      operationId: updateReview
      parameters:
        - $ref: '#/parameters/reviewIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatableReview'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/Review'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    patch:
      summary: Partially update the review.
      description: |
        Allows to partially modify the review with the provided request body properties.

        **Authorization:** Partially modify of review is accessible only by `admin` role.
      tags:
        - 'Reviews'
      operationId: partiallyUpdateReview
      parameters:
        - $ref: '#/parameters/reviewIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PartiallyReview'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/Review'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    delete:
      summary: Delete the review.
      description: |
        Delete the review.

        **Authorization:** Review deletion is accessible only by `admin` role.
      tags:
        - 'Reviews'
      operationId: deleteReview
      parameters:
        - $ref: '#/parameters/reviewIdParam'
      responses:
        204:
          $ref: '#/definitions/NoContent'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

  /reviewTypes:
    get:
      summary: Get all review types.
      description: |
        Get all review types. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Resulted collection of review types can be filtered using filter parameters `name`, `isActive` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review types is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review types'
      operationId: getReviewTypes
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewTypeName'
        - $ref: '#/parameters/filterReviewTypeIsActive'
      responses:
        200:
          description: OK - the request was successful, the resource are returned.

          schema:
            type: array
            items:
              $ref: '#/definitions/ReviewType'
            example:
              - id: 'a12bc180-65ab-42ec-a945-5fd2dec1567'
                name: 'Iterative Review'
                isActive: true
              - id: 'a12bc180-65ab-42ec-a945-5fd2dec1568'
                name: 'Screening'
                isActive: true

          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.

        Requested review types can be filtered using filter parameters `name`, `isActive` (all filter parameters are optional and combined by the logical operation `AND`).

        **Authorization:** Review types is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review types'
      operationId: headReviewTypes
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        # filter parameters
        - $ref: '#/parameters/filterReviewTypeName'
        - $ref: '#/parameters/filterReviewTypeIsActive'
      responses:
        200:
          description: OK - The request was successful.
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    post:
      summary: Create a review type.
      description: |
        Create a new review type.

        **Authorization:** Review type creation is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review types'
      operationId: createReviewType
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ReviewType'
      responses:
        201:
          description: Created - The request was successful and the resource is returned.

          schema:
            $ref: '#/definitions/ReviewType'
          headers:
            Location:
              type: string
              description: The Location response header indicates the URL to redirect a page to or created resource. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        409:
          $ref: '#/definitions/Conflict'
        500:
          $ref: '#/definitions/ServerError'

  /reviewTypes/{reviewTypeId}:

    get:
      summary: Get the review type.
      description: |
        Get the review type by id.

        **Authorization:** Review type is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review types'
      operationId: getReviewType
      parameters:
        - $ref: '#/parameters/reviewTypeIdParam'
        # request headers
        - $ref: '#/parameters/IfNoneMatchParamHeader'
        - $ref: '#/parameters/IfModifiedSinceParamHeader'
      responses:
        200:
          description: OK - the request was successful and the review is returned.
          schema:
            $ref: '#/definitions/ReviewType'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    head:
      summary: |
        Get only response status and headers information but no response body for the endpoint.
      description: |
        Get response status and headers information for the endpoint. It does not contain response body.

        **Authorization:** Review type is accessible by roles `admin` and `copilot`.
      tags:
        - 'Review types'
      operationId: headReviewType
      parameters:
        - $ref: '#/parameters/reviewTypeIdParam'
        # request headers
        - $ref: '#/parameters/IfNoneMatchParamHeader'
        - $ref: '#/parameters/IfModifiedSinceParamHeader'
      responses:
        200:
          description: OK - The request was successful.
        400:
          $ref: '#/definitions/BadRequestWithoutBody'
        401:
          $ref: '#/definitions/UnauthorizedWithoutBody'
        403:
          $ref: '#/definitions/ForbiddenWithoutBody'
        500:
          $ref: '#/definitions/ServerErrorWithoutBody'

    put:
      summary: Update the review type.
      description: |
        Update the review type by id.

        **Authorization:** Review type update is accessible only by `admin` role.
      tags:
        - 'Review types'
      operationId: updateReviewType
      parameters:
        - $ref: '#/parameters/reviewTypeIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatableReviewType'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.

          schema:
            $ref: '#/definitions/ReviewType'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    patch:
      summary: Partially update the review type.
      description: |
        Allows to partially modify the review type with the provided request body properties.

        **Authorization:** Partially modify of review type is accessible only by `admin` role.
      tags:
        - 'Review types'
      operationId: partiallyUpdateReviewType
      parameters:
        - $ref: '#/parameters/reviewTypeIdParam'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PartiallyReviewType'
      responses:
        200:
          description: OK - The request was successful and the updated resource is returned.
          schema:
            $ref: '#/definitions/ReviewType'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

    delete:
      summary: Delete the review type.
      description: |
        Delete the review type.

        **Authorization:** Review type deletion is accessible only by `admin` role.
      tags:
        - 'Review types'
      operationId: deleteReviewType
      parameters:
        - $ref: '#/parameters/reviewTypeIdParam'
      responses:
        204:
          $ref: '#/definitions/NoContent'
        400:
          $ref: '#/definitions/BadRequest'
        401:
          $ref: '#/definitions/Unauthorized'
        403:
          $ref: '#/definitions/Forbidden'
        404:
          $ref: '#/definitions/NotFound'
        500:
          $ref: '#/definitions/ServerError'

parameters:
  page:
    name: page
    in: query
    description: The page number.
    required: false
    type: integer
    default: 1

  perPage:
    name: perPage
    in: query
    description: The number of items to list per page.
    required: false
    type: integer
    default: 20
    maximum: 100

  filterSubmissionType:
    in: query
    name: type
    description: The type filter for submissions.
    required: false
    type: string

  filterSubmissionUrl:
    in: query
    name: url
    description: The url filter for submissions.
    required: false
    type: string

  filterSubmissionMemberId:
    in: query
    name: memberId
    description: The member id filter for submissions.
    required: false
    oneOf:
      - type: string
      - type: integer

  filterSubmissionChallengeId:
    in: query
    name: challengeId
    description: The challenge id filter for submissions.
    required: false
    oneOf:
      - type: string
      - type: integer

  filterSubmissionLegacySubmissionId:
    in: query
    name: legacySubmissionId
    description: The legacy submission id filter for submissions.
    required: false
    oneOf:
      - type: string
      - type: integer

  filterSubmissionLegacyUploadId:
    in: query
    name: legacyUploadId
    description: The legacy upload id filter for submissions.
    required: false
    oneOf:
      - type: string
      - type: integer

  filterSubmissionSubmissionPhaseId:
    in: query
    name: submissionPhaseId
    description: The submission phase id filter for submissions.
    required: false
    oneOf:
      - type: string
      - type: integer

  filterReviewSummationSubmissionId:
    in: query
    name: submissionId
    description: The submission id filter for review summations.
    required: false
    type: string

  filterReviewSummationAaggregateScore:
    in: query
    name: aggregateScore
    description: Theaggregate score filter for review summations.
    required: false
    type: number
    format: double

  filterReviewSummationScoreCardId:
    in: query
    name: scoreCardId
    description: The score card id filter for review summations.
    required: false
    type: string

  filterReviewSummationIsPassing:
    in: query
    name: isPassing
    description: The passing boolean flag filter for review summations.
    required: false
    type: boolean

  filterReviewScore:
    in: query
    name: score
    description: The score filter for reviews.
    required: false
    type: number
    format: double

  filterReviewTypeId:
    in: query
    name: typeId
    description: The type id filter for reviews.
    required: false
    type: string

  filterReviewReviewerId:
    in: query
    name: reviewerId
    description: The reviewer id filter for reviews.
    required: false
    type: string

  filterReviewScoreCardId:
    in: query
    name: scoreCardId
    description: The score card id filter for reviews.
    required: false
    type: string

  filterReviewSubmissionId:
    in: query
    name: submissionId
    description: The submission id filter for reviews.
    required: false
    type: string
  
  filterReviewTypeName:
    in: query
    name: name
    description: The name filter for review types.
    required: false
    type: string

  filterReviewTypeIsActive:
    in: query
    name: isActive
    description: The active boolean flag filter for review types.
    required: false
    type: boolean

  reviewIdParam:
    name: reviewId
    in: path
    description: review id
    required: true
    type: string

  reviewSummationIdParam:
    name: reviewSummationId
    in: path
    description: review summation id
    required: true
    type: string

  reviewTypeIdParam:
    name: reviewTypeId
    in: path
    description: review type id
    required: true
    type: string

  submissionIdParam:
    name: submissionId
    in: path
    description: submission id
    required: true
    type: string

definitions:
  NoContent:
    description: |
      No Content - The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.

  BadRequestWithoutBody:
    description: |
      Bad Request - Request validation error, unable to process the request due to an error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing).

  UnauthorizedWithoutBody:
    description: |
      Unauthorized - Occurs when the JWT token provided is either expired or invalid.

  ForbiddenWithoutBody:
    description: |
      Forbidden - The request is not allowed.

  ServerErrorWithoutBody:
    description: |
      Server Error - While handling the request something went wrong server-side.

  Submission:
    description: The submission entity.
    type: object
    required:
      - id
      - type
      - url
      - memberId
      - challengeId
    allOf:
      - type: object
        properties:
          id:
            type: string
            readOnly: true
            description:  The submission id.
            example: a12a4180-65aa-42ec-a945-5fd21def1567'
      - $ref: "#/definitions/PartiallySubmission"
      - $ref: "#/definitions/Auditable"

  PartiallySubmission:
    description: The submission entity fields that can be partially updated.
    type: object
    properties:
      type:
        type: string
        description:  The submission type.
        example: 'ContestSubmission'
      url:
        type: string
        description:  The submission url.
        example: 'http://content.topcoder.com/some/path'
      memberId:
        oneOf:
          - type: string
          - type: integer
        description:  The submission member id.
        example: 'a84a4180-65aa-42ec-a945-5fd21dec1567'
      challengeId:
        oneOf:
          - type: string
          - type: integer
        description:  The submission challenge id.
        example: 'a12bc180-65aa-42ec-a945-5fd21dec1567'

  UpdatableSubmission:
    description: The submission entity fields that updates whole entity.
    type: object
    required:
      - type
      - url
      - memberId
      - challengeId
    allOf:
      - $ref: '#/definitions/PartiallySubmission'

  ReviewSummation:
    description: The review summation entity.
    type: object
    required:
      - id
      - submissionId
      - aggregateScore
      - scoreCardId
      - isPassing
    allOf:
      - type: object
        properties:
          id:
            type: string
            readOnly: true
            description: The review summation id.
            example: 'a12bc180-65aa-42ec-a945-7ad21dec1567'
      - $ref: "#/definitions/PartiallyReviewSummation"
      - $ref: "#/definitions/Auditable"

  PartiallyReviewSummation:
    description: The review summation entity fields that can be partially updated.
    type: object
    properties:
      submissionId:
        type: string
        description: The review summation submission id.
        example: 'a12bc180-43aa-42ec-a945-5fd21dec1567'
      aggregateScore:
        type: number
        format: double
        description: The review summation aggregate score.
        example: 97.8
      scoreCardId:
        type: string
        description: The review summation score card id.
        example: 'a12bc180-65aa-42aa-a945-5fd21dec1567'
      isPassing:
        type: boolean
        description: The review summation passing boolean flag.
        example: true

  UpdatableReviewSummation:
    description: The review summation entity fields that updates whole entity.
    type: object
    required:
      - submissionId
      - aggregateScore
      - scoreCardId
      - isPassing
    allOf:
      - $ref: '#/definitions/PartiallyReviewSummation'

  Review:
    description: The review entity.
    type: object
    required:
      - id
      - score
      - typeId
      - reviewerId
      - scoreCardId
      - submissionId
    allOf:
      - type: object
        properties:
          id:
            type: string
            readOnly: true
            description: The review id.
            example: 'a12bd180-65aa-42ec-a945-5fd21dec1567'
      - $ref: "#/definitions/PartiallyReview"
      - $ref: "#/definitions/Auditable"

  PartiallyReview:
    description: The review entity fields that can be partially updated.
    type: object
    properties:
      score:
        type: number
        format: double
        description: The review score.
        example: 95.5
      typeId:
        type: string
        description: The review type id.
        example: 'a12bc180-65ab-42ec-a945-5fd21dec1567'
      reviewerId:
        type: string
        example: 'a12bc280-65ab-42ec-a945-5fd21dec1567'
        description: The review reviewer id.
      scoreCardId:
        type: string
        description: The review score card id.
        example: 'a12bd180-65ab-42ec-a945-5fd21dec1567'
      submissionId:
        type: string
        description: The submission id.
        example: 'a12bc180-65ab-42ec-a945-5fd2dec1567'

  UpdatableReview:
    description: The review entity fields that updates whole entity.
    type: object
    required:
      - score
      - typeId
      - reviewerId
      - scoreCardId
      - submissionId
    allOf:
      - $ref: '#/definitions/PartiallyReview'

  ReviewType:
    description: The review type entity.
    type: object
    required:
      - id
      - name
      - isActive
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The review type id.
            example: 'a12bc180-65ab-42ec-a945-5fd2dec1567'
      - $ref: "#/definitions/PartiallyReviewType"

  PartiallyReviewType:
    description: The review type entity fields that can be partially updated.
    type: object
    properties:
      name:
        type: string
        description: The review type name.
        example: "Iterative Review"
      isActive:
        type: boolean
        description: The review type activity boolean flag.
        example: true

  UpdatableReviewType:
    description: The review entity type fields that updates whole entity.
    type: object
    required:
      - name
      - isActive
    allOf:
      - $ref: '#/definitions/PartiallyReviewType'

  Auditable:
    description: The entity used as mark to add audit fields.
    type: object
    readOnly: true
    properties:
      created:
        type: string
        format: date-time
        readOnly: true
        description: The entity creation date.
        example: '2018-05-20T07:00:30.123Z'
      updated:
        type: string
        format: date-time
        readOnly: true
        description: The entity update date.
        example: '2018-06-01T07:36:28.178Z'
      createdBy:
        type: string
        readOnly: true
        description: The user who created the entity.
        example: 'admin'
      updatedBy:
        type: string
        readOnly: true
        description: The user who updated the entity.
        example: 'admin'

  # Schema for error body
  Unauthorized:
    type: object
    description: The unauthorized error entity.
    properties:
      message:
        type: string
        description: The unauthorized error message.
        example: Unable to authenticate the user.

  NotFound:
    type: object
    description: The not found error entity.
    properties:
      message:
        type: string
        description: The not found error message.
        example: A resource with the name could not be found.

  ServerError:
    type: object
    description: The server error entity.
    properties:
      message:
        type: string
        description: The server error message.
        example: Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment.

  BadRequest:
    type: object
    description: The bad request error entity.
    properties:
      message:
        type: string
        description: The bad request error message.
        example: Invalid input.

  Forbidden:
    type: object
    description: The permission error entity.
    properties:
      message:
        type: string
        description: The forbidden error message.
        example: You are not allowed to access the request.

  Conflict:
    type: object
    description: The conflict error entity.
    required:
      - message
    properties:
      message:
        type: string
        description: The conflict error message.
        example: Creating a resource with a name already exists.

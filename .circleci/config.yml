version: 2.1
parameters:
  run_performancetesting:
    default: true
    type: boolean
  run_basedeployment:
    default: false
    type: boolean
defaults: &defaults
    docker:
      - image: circleci/python:stretch-browsers
install_dependency: &install_dependency
    name: Installation of build and deployment dependencies.
    command: |
      sudo apt install jq
      sudo pip3 install awscli --upgrade
      sudo pip3 install docker-compose      

install_deploysuite: &install_deploysuite
          name: Installation of install_deploysuite.
          command: |
            git clone --branch v1.4.1 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
run_build: &run_build
          name: Installation of build dependencies.
          command: ./build.sh

jobs:
  # Build & Deploy against development backend
  "build-dev":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - run: *run_build
      - deploy:
          name: Running Masterscript for Dev deploy
          command: |
            ./awsconfiguration.sh DEV
            source awsenvconf
            ./buildenv.sh -e DEV -b dev-submissions-api-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s dev-global-appvar,dev-submissions-api-appvar -i submissions-api
            #testing code changes
            if [[ true ]]; then
                ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-qa-v1-appvar
                source buildenvvar  
                curl --request POST \
                  --url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
                  --header "Circle-Token: ${QA_USER_TOKEN}" \
                  --header 'content-type: application/json' \
                  --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_basedeployment": false, run_performancetesting":true}}'
            fi
            
  "build-prod":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - run: *run_build
      - deploy:
          name: Running Masterscript for Prod deploy
          command: |
            ./awsconfiguration.sh PROD
            source awsenvconf
            ./buildenv.sh -e PROD -b prod-submissions-api-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s prod-global-appvar,prod-submissions-api-appvar -i submissions-api

  "Performance-Testing":
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo
    
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run: mvn verify

      - store_artifacts:
          path: target/jmeter/reports


workflows:
  version: 2
  build:
    when: << pipeline.parameters.run_basedeployment >>
    jobs:
      # Development builds are executed on "develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only: ['develop']
      - "build-prod":
          context : org-global
          filters:
            branches:
              only: master

  Performance Testing:
   when: << pipeline.parameters.run_performancetesting >>
   jobs:
      # Performance Test is executed on "feature/performance" branch only.
      - Hold [Performance-Testing]:
          type: approval
      - Performance-Testing:
          requires:
            - Hold [Performance-Testing]
          filters:
            branches:
              only:
                - develop
                - feature/performance
                - performance